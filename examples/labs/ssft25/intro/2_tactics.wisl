
@config manual_fold : true

{ (x == #x) * list(#x, #alpha) }
function llen(x) {
    if (x == null) {
        [[ unfold list(#x, #alpha) ]];
        [[ assert (len #alpha == 0) ]];
        n := 0;
        [[ fold list(#x, #alpha) ]]
    } else {
        [[ unfold list(#x, #alpha) ]];
        t := [x+1];
        [[ assert {bind: #beta} list(t, #beta) ]];
        n := llen(t);
        [[ assert (n == len #beta) ]];
        n := n + 1;
        [[ apply nonempty_list(#x, #alpha) ]]
    };
    return n
}
{ list(#x, #alpha) * (ret == len(#alpha)) }

lemma nonempty_list {
  statement:
    forall x, alpha.
      (x -> #v, #z) * list(#z, #beta) * (alpha == #v::#beta) |- list(x, alpha)
  
  proof:
    fold list(x, alpha)
}

predicate list(+x, alpha) {
    (x == null) * (alpha == nil);
    (x -> #v, #z) * list(#z, #beta) * (alpha == #v::#beta)
}