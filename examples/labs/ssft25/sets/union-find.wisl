predicate ECC(+x, p, s : Set) {
	(s == -{p}-) * (x == p) * p -> p;
	(x -b> a) * (p != x) *
	(a != x) * ECC(a, p, #s) *
    (a -e- s) 
	* (s == #s -u- -{x}-) *
	(!(x -e- #s))
}

{ (x == #x) * ECC(#x, #p, #s) * (#x -e- #s) }
function UFRep(x) {
	next := [x];
	if (next == null) {
		r := x
	} else {
		r := UFRep(next)
	};
	return r
}
{ ECC(#x, #p, #s) * (ret == #p) }

{ (x == #x) * (y == #y) * ECC(#x, #px, #sx) * ECC(#y, #py, #sy) * (#x -e- #sx) * (#y -e- #sy)}
function UFMerge(x, y) {
	px := UFRep(x);
	py := UFRep(y);
	[py] := px;
	return px
}
{ ECC(#x, #px, #sx) * (ret == #px) }