// ========== 8 - Fibonacci ==========
//
// A simple example of recursion vs iteration, with Fibonacci!
//
// This will get you thinking about pure vs non-pure predicates; one
// is more restrictive than the other in terms of what you can do with it.

//#region  === DON'T EDIT THIS ===

@config manual_fold: false

predicate fib(+n, res: Int) {
  (n <= 0) * (res == 0);
  (n == 1) * (res == 1);
  (n >= 2) * fib(n-1, #a) * fib(n-2, #b) * (res == (#a+#b))
}

lemma fib_copy {
  statement:
    forall n, r.
      fib(n, r) |- fib(n, r) * fib(n, r)

  proof:
    unfold fib(n, r);
    if(n <= 1) {
      assert true
    } else {
      assert fib(n-1, #a);
      assert fib(n-2, #b);
      apply fib_copy(n-1, #a);
      apply fib_copy(n-2, #b)
    };
    fold fib(n, r);
    fold fib(n, r)
}

//#endregion  === EDIT BELOW HERE ===

//+Note here how in automatic mode, Gillian is capable of proving the
//+recursive function automatically, without lemmas or anything.

{ (n == #n) * (#n: Int) }
function fib_rec(n) {
  if(n < 2) {
    if(n <= 0) {
      r := 0
    } else {
      r := 1
    }
  } else {
    a := fib_rec(n - 1);
    b := fib_rec(n - 2);
    r := a + b
  };
  return r
}
{ (ret == #res) * fib(#n, #res) }


//+With the iterative style however, things get a bit more involved!

{ (n == #n) * (#n: Int) }
function fib_iter(n) {
  if(n < 2) {
    if(n < 1) {
      r := 0
    } else {
      r := 1
    }
  } else {
    b := 1;
    r := b;
    i := 2;
    [[ invariant {bind: b, r, i}
      fib(i - 1, b) * fib(i, r) *
        (2 <= i) * (i <= n) * (n == #n)
    ]];
    while(i < n) {
      i := i + 1;
      a := b;
      b := r;
      r := a + b;
      //?? Here, you need to consume both fib(n-2) and fib(n-1) predicates to get the
      //? fib(n) predicates, but these are pure so you should be able to duplicate them!
      //-[[ apply fib_copy(i - 1, b) ]];
      //-[[ apply fib_copy(i - 2, a) ]];
    }
  };
  return r
}
{ (ret == #res) * fib(#n, #res) }
