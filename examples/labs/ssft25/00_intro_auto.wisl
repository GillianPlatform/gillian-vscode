@config manual_fold : false

// === INTRO ===
//
// In this exercise, let's take a look at Gillian's 'matching' process.
// Whenever Gillian needs to check that the current state satisfies some
// condition (e.g. a compositional function call, checking the postcondition),
// it will perform a 'match'.
// To illustrate this, try running the debugger and stepping to the recursive
// call to `llen()`; Gillian performs a match to check that the precondition for
// the recursive call holds (and then know what to consume from the state).
// In this case, it checks some basic properties (e.g. #alpha is a list) and
// most notably, that the list predicate holds.

predicate list(+x, alpha) {
    (x == null) * (alpha == nil);
    (x -> #v, #z) * list(#z, #beta) * (alpha == #v::#beta)
}

{ (x == #x) * list(#x, #alpha) }
function llen(x) {
    if (x == null) {
        n := 0
    } else {
        t := [x+1];
        n := llen(t);
        n := n + 1
    };
    return n
}
{ list(#x, #alpha) * (ret == len(#alpha)) }
