@config manual_fold : true

// === Assert tactic ===
// TODO: Give a tutorial using list_reverse as an example and let them figure out find_min.


predicate list(+x, alpha) {
    (x == null) * (alpha == nil);
    (x -> #v, #z) * list(#z, #beta) * (alpha == #v::#beta)
}

{(x == #x) * (y == #y) * list(#x, #vx) * list(#y, #vy) }
function list_concat(x, y) {
  [[ unfold list(x, #vx) ]];
  if (x == null){
    x := y
  } else {
    t := [x + 1];
    z := list_concat(t, y);
    [x + 1] := z;
    [[ fold list(x, #vx @ #vy) ]]
  };
  return x
}
{ list(ret,  #vx @ #vy) }

{ (x == #x) *  list(#x, #vs) }
function list_reverse(x){
  [[ unfold list(x, #vs) ]];
  if (x != null) {
    t := [x + 1];
    [x + 1] := null;
    [[ assert {bind: #v, #beta} (#vs == (#v :: #beta)) ]];
    z := list_reverse(t);
    [[ fold list(null, [] )]];
    [[ fold list(x, [ #v ])]];
    y := list_concat(z, x)
  } else {
    y := null;
    [[ fold list(y, rev(#vs)) ]]
  };
  return y
}
{ list(ret, rev #vs) }

predicate min(+alpha, v : Int) {
  (alpha == [v]);
  (alpha == #v :: #vs) * (v < #v) * min(#vs, v);
  (alpha == #v :: #vs) * (#v <= #min) * min(#vs, #min) * (v == #v)
}

{ (x == #x) * (x != null) * list(x, #alpha) }
function find_min(x) {
  [[ unfold list(x, #alpha) ]];
  val := [x];
  assume_type(val, Int); // TODO: change this to the new type assertion
  next := [x + 1];
  if (next == null) {
    [[ assert {bind: #beta} list(next, #beta) ]];
    [[ unfold list(next, #beta) ]];
    r := val;
    [[ fold list(null, [])]]
  } else {
    r := find_min(next, val);
    if (val <= r) {
      r := val
    } else {
      skip
    }
  };
  [[ fold min(#alpha, r) ]];
  [[ fold list(x, #alpha) ]];
  return r
}
{ list(#x, #alpha) * min(#alpha, #r) * (ret == #r)}